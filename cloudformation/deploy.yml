---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  HostedZoneId:
    Type: 'String'
    Description: 'The zone id for the hosted zone'
  HostedZoneName:
    Type: 'String'
    Description: 'The zone name for the hosted zone'

Resources:
  # >> VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SSMVPC:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_vpc-id'
      Value: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.20.0/24
      MapPublicIpOnLaunch: false

  SSMPrivateSubnetOne:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_private-subnet-1'
      Value: !Ref PrivateSubnetOne

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.21.0/24
      MapPublicIpOnLaunch: false

  SSMPrivateSubnetTwo:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_private-subnet-2'
      Value: !Ref PrivateSubnetTwo

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetOne

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetTwo

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetOne

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetTwo

  # NOTE: Needed so that fargate can pull the container from ECR
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetOne

  PrivateRouteTableRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway


  # >> Domain & Certificate

  DomainRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Sub
        - 'play.${Domain}.'
        - Domain: !Ref HostedZoneName
      HostedZoneId: !Ref HostedZoneId
      Type: 'A'
      AliasTarget:
        DNSName: !GetAtt HttpEcsAlb.DNSName
        HostedZoneId: !GetAtt HttpEcsAlb.CanonicalHostedZoneID
        EvaluateTargetHealth: false

  # Point `fiddle.xtdb.com` to `play.xtdb.com`
  FiddleDomainRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Sub
        - 'fiddle.${Domain}.'
        - Domain: !Ref HostedZoneName
      HostedZoneId: !Ref HostedZoneId
      Type: 'CNAME'
      TTL: 60
      ResourceRecords:
        - !Sub
          - 'play.${Domain}.'
          - Domain: !Ref HostedZoneName

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub
        - 'play.${Domain}'
        - Domain: !Ref HostedZoneName
      ValidationMethod: 'DNS'

      DomainValidationOptions:
        - DomainName: !Sub
            - 'play.${Domain}'
            - Domain: !Ref HostedZoneName
          HostedZoneId: !Ref HostedZoneId

  PgwireDomainRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Sub
        - 'pg-fiddle.${Domain}.'
        - Domain: !Ref HostedZoneName
      HostedZoneId: !Ref HostedZoneId
      Type: 'A'
      AliasTarget:
        DNSName: !GetAtt PgwireEcsLb.DNSName
        HostedZoneId: !GetAtt PgwireEcsLb.CanonicalHostedZoneID
        EvaluateTargetHealth: false

  # >> Security Group

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group allowing ingress/egress for all
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  SelfIngressAllowRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  # >> HTTP Load Balancer

  HttpEcsAlb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: HttpEcsAlb
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref SecurityGroup

  HttpEcsTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: HttpEcsAlb
    Properties:
      Name: HttpEcsTargetGroup
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip

      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckPath: /status
      HealthCheckTimeoutSeconds: 5

  HttpSsmEcsTargetGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_http-target-group-arn'
      Value: !Ref HttpEcsTargetGroup

  # Redirect all HTTP traffic to HTTPS
  HttpAlbListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref HttpEcsAlb
      Port: '80'
      Protocol: HTTP

      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Port: 443
            Protocol: HTTPS
            StatusCode: HTTP_301

  # Terminate TLS & forward all traffic to the container
  HttpsAlbListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Port: '443'
      Protocol: HTTPS
      LoadBalancerArn: !Ref HttpEcsAlb

      SslPolicy: 'ELBSecurityPolicy-TLS13-1-2-2021-06'
      Certificates:
        - CertificateArn: !Ref Certificate

      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HttpEcsTargetGroup

  # >> Pgwire Load Balancer

  PgwireEcsLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: PgwireEcsLb
      Type: network
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref SecurityGroup

  PgwireEcsTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: PgwireEcsLb
    Properties:
      Name: PgwireEcsTargetGroup
      Port: 5432
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: ip

      HealthCheckProtocol: HTTP
      HealthCheckPath: /status
      HealthCheckPort: 8000
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5

  PgwireLbListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref PgwireEcsLb
      Port: 5432
      Protocol: TCP

      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PgwireEcsTargetGroup

  PgwireSsmEcsTargetGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_pgwire-target-group-arn'
      Value: !Ref PgwireEcsTargetGroup

  # >> ECS Service
  # The rest is in service.yml so it can be deployed by github

  TaskSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: '{{resolve:ssm:xt-fiddle_vpc-id}}'
      GroupDescription: Security group allowing access to container
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  SSMECSTaskSecurityGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_task-security-group'
      Value: !Ref TaskSecurityGroup

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'xt-fiddle'

  SSMECSCluster:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_ecs-cluster'
      Value: !Ref ECSCluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'xt-fiddle'
      RetentionInDays: 365

  SSMLogGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_log-group'
      Value: !Ref LogGroup

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  SSMTaskExecutionRole:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_task-execution-role-arn'
      Value: !GetAtt TaskExecutionRole.Arn

  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'

  SSMTaskRole:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_task-role-arn'
      Value: !GetAtt TaskRole.Arn

  ContainerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: xt-fiddle

  SSMContainerRepoRepoUri:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: 'xt-fiddle_container-repo-repo-uri'
      Value: !GetAtt ContainerRepo.RepositoryUri
