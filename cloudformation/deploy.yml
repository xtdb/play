---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  HostedZoneId:
    Type: 'String'
    Description: 'The zone id for the hosted zone'
  HostedZoneName:
    Type: 'String'
    Description: 'The zone name for the hosted zone'
  DockerTag:
    Type: 'String'
    Default: 'latest'
    Description: 'The zone name for the hosted zone'

Resources:
  # >> VPC
  # TODO: Use sub-stacks?

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.20.0/24
      MapPublicIpOnLaunch: false

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.21.0/24
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetOne

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetTwo

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetOne

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetTwo

  # NOTE: Needed so that fargate can pull the container from ECR
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetOne

  PrivateRouteTableRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway


  # >> Domain & Certificate

  DomainRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Sub
        - 'fiddle.${Domain}.'
        - Domain: !Ref HostedZoneName
      HostedZoneId: !Ref HostedZoneId
      Type: 'A'
      AliasTarget:
        DNSName: !GetAtt ECSALB.DNSName
        HostedZoneId: !GetAtt ECSALB.CanonicalHostedZoneID
        EvaluateTargetHealth: false

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub
        - 'fiddle.${Domain}'
        - Domain: !Ref HostedZoneName
      ValidationMethod: 'DNS'

      DomainValidationOptions:
        - DomainName: !Sub
            - 'fiddle.${Domain}'
            - Domain: !Ref HostedZoneName
          HostedZoneId: !Ref HostedZoneId


  # >> Load Balancer

  # TODO: Rename
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group allowing ingress/egress for all
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  # TODO: Is this needed?
  SelfIngressAllowRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: ECSALB
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref SecurityGroup

  ECSTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ECSALB
    Properties:
      Name: ECSTargetGroup
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip

      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckPath: /status
      HealthCheckTimeoutSeconds: 5

  # Redirect all HTTP traffic to HTTPS
  HTTPALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ECSALB
      Port: '80'
      Protocol: HTTP

      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Port: 443
            Protocol: HTTPS
            StatusCode: HTTP_301

  # Terminate TLS & forward all traffic to the container
  HTTPSALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Port: '443'
      Protocol: HTTPS
      LoadBalancerArn: !Ref ECSALB

      SslPolicy: 'ELBSecurityPolicy-TLS13-1-2-2021-06'
      Certificates:
        - CertificateArn: !Ref Certificate

      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup


  # >> ECS Deployment

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'xt-fiddle'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'xt-fiddle'
      RetentionInDays: 365

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'

  ContainerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: xt-fiddle

  # TODO: Add scaling
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'xt-fiddle'
      RequiresCompatibilities:
        - 'FARGATE'
      NetworkMode: 'awsvpc'

      # TODO: Scale up/down?
      Cpu: '1024'
      Memory: '4096'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn

      ContainerDefinitions:
        - Name: 'xt-fiddle'
          Image: !Join [":", [!GetAtt ContainerRepo.RepositoryUri, !Ref DockerTag]]
          Essential: true
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: xt-fiddle

  TaskSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group allowing access to container
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: 'FARGATE'

      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60

      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'DISABLED'
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets:
            - !Ref PrivateSubnetOne
            - !Ref PrivateSubnetTwo

      LoadBalancers:
        - ContainerName: xt-fiddle
          ContainerPort: '8000'
          TargetGroupArn: !Ref ECSTargetGroup


  # >> Github deploy IAM Role

  GithubDeployUser:
    Type: 'AWS::IAM::User'
    Properties:
      Policies:
        # ECR Push
        - PolicyName: ecr-allow-push
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:UploadLayerPart
                  - ecr:InitiateLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:BatchGetImage
                Resource: "*"
                # Resource:
                #   - !GetAtt ContainerRepo.Arn
        # https://github.com/aws-actions/amazon-ecs-deploy-task-definition?tab=readme-ov-file#permissions
        - PolicyName: task-definition-update
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: RegisterTaskDefinition
                Effect: Allow
                Action:
                  - ecs:RegisterTaskDefinition
                Resource: "*"
              - Sid: PassRolesInTaskDefinition
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt TaskRole.Arn
                  - !GetAtt TaskExecutionRole.Arn
              - Sid: DeployService
                Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource:
                  - !GetAtt ECSCluster.Arn
        # https://github.com/aws-actions/aws-cloudformation-github-deploy?tab=readme-ov-file#permissions
        - PolicyName: cloudformation-deploy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:ExecuteChangeSet
                Resource: "*"

  GithubDeployUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref GithubDeployUser

Outputs:
  GithubDeployAccessKeyId:
    Value: !Ref GithubDeployUserAccessKey
  GithubDeploySecretAccessKey:
    Value: !GetAtt GithubDeployUserAccessKey.SecretAccessKey
